bell.set = rnorm(pop.size,sd = .9)
hist(bell.set)
bell.set = rnorm(pop.size,sd = 3)
hist(bell.set)
bell.set = rnorm(pop.size,sd = 1)
hist(bell.set)
bell.set = rnorm(pop.size,sd = 1)
hist(bell.set)
beta.set = rbeta(pop.size, 3, 12)
hist(beta.set)
high.set = rbeta(pop.size,4,2)
hist(beta.set)
hist(high.set)
high.set = rbeta(pop.size,4,1)
hist(high.set)
high.set = rbeta(pop.size,5,1)
hist(high.set)
high.set = rbeta(pop.size,5,3)
hist(high.set)
high.set = rbeta(pop.size,6,3)
hist(high.set)
hist(bell.set)
hist(low.set)
hist(low.set)
low.set = rbeta(pop.size, 3, 12)
hist(bell.set)
hist(low.set)
hist(high.set)
rm(list=ls())
source('~/.active-rstudio-document')
high.set = rbeta(pop.size,7,3)
hist(high.set)
unif.set = runif(pop.size)
hist(unif.set)
gamma.set = rgamma(pop.size,3)
hist(gamma.set)
gamma.set = rgamma(pop.size,4)
hist(gamma.set)
gamma.set = rgamma(pop.size,2)
hist(gamma.set)
tailed.set = rnorm(pop.size,sd=10)
hist(tailed.set)
rnbinom(pop.size,3,.2)
rn = rnbinom(pop.size,3,.2)
hist(rn)
rn = rhyper(pop.size,3,.2)
rn = rhyper(pop.size,3,2)
rn = rhyper(pop.size,10,3,4)
hist(rn)
rn = rhyper(pop.size,100,30,14)
hist(rn)
rn = rhyper(pop.size,30,14,6)
hist(rn)
rn = rgeom(pop.size,0.6)
hist(rn)
rp = rpois(pop.size,.5)
hist(rp)
rp = rpois(pop.size,1)
hist(rp)
rn = rgeom(pop.size,0.9)
hist(rn)
plot(rn)
rn = rgeom(pop.size,0.6)
plot(rn)
hist(rn)
rp = rpois(pop.size,1)
hist(rp)
rp = rpois(pop.size,.2)
hist(rp)
rp = rpois(pop.size,.6)
hist(rp)
plot(rp)
rp = rpois(pop.size,.3)
plot(rp)
hist(rp)
rn = rgeom(pop.size,0.6)
plot(rn)
rn = rgeom(pop.size,0.3)
plot(rn)
hist(rn)
plot(rn)
plot(gamma.set)
hist(gamma.set)
rn = rgeom(pop.size,0.3)
packrat::snapshot(prompt = FALSE)
source('~/devel/whitby-prototype/distributions.R')
rm(list=ls())
source('~/devel/whitby-prototype/distributions.R')
distrib.generator <- function(n = 100) {
# bell curve
bell.set = rnorm(n,sd = 1)
# low-end tendency
low.set = rbeta(n, 3, 12)
# high-end tendency
high.set = rbeta(n,7,3)
# uniform
unif.set = runif(n)
# long high tail unimodal
gamma.set = rgamma(n,2)
# discrete decay
rn = rgeom(n,0.3)
}
distrib.generator()
source('~/devel/whitby-prototype/distributions.R')
distrib.generator()
distrib.generator()$decay
source('~/devel/whitby-prototype/distributions.R')
distribs = distrib.generator()
hist(distribs$decay)
plot(distribs$decay)
distribs = distrib.generator(400)
plot(distribs$decay)
hist(distribs$decay)
plot(distribs$bell)
hist(distribs$bell)
distribs = distrib.generator(400)
hist(distribs$bell)
distribs = distrib.generator(400)
hist(distribs$bell)
distribs = distrib.generator(800)
hist(distribs$bell)
distribs = distrib.generator(80000)
hist(distribs$bell)
source('~/devel/whitby-prototype/src/distGen.R')
library(tidyverse)
packrat::status()
packrat::restore()
packrat::clean()
packrat::install_local("plyr")
packrat::set_opts(local.repos="../../R/x86_64-pc-linux-gnu-library/3.3/")
packrat::install_local("plyr")
packrat::install_local("dplyr")
packrat::repos_add_local("../../R/x86_64-pc-linux-gnu-library/3.3")
packrat::repos_add_local(gnu = "../../R/x86_64-pc-linux-gnu-library/3.3")
packrat::repos_list()
packrat::repos_add(UCBerkeley = "https://cran.cnr.berkeley.edu/")
packrat::unused_packages()
packrat::status()
packrat::repos_set()
packrat::install("tidyverse")
packrat::install_local("tidyverse")
packrat::install_local("tidyr")
packrat::snapshot(prompt = FALSE)
packrat::repos_remove(gnu)
packrat::repos_remove("gnu"gnu)
packrat::repos_remove("gnu")
packrat::snapshot(prompt = FALSE)
packrat::restore(prompt = FALSE)
source('~/devel/whitby-prototype/src/distGen.R')
rm(list=ls())
source('~/devel/whitby-prototype/pupil_static.R')
source("src/distGen.R")
distList = distGen(n = student.pop)
hist(distList$bell)
hist(distList$unif)
mean(distList$bell)
distList$bell * runif(length(distList$bell))
wgpa = distList$bell * runif(length(distList$bell))
mean(wgpa)
mean(distList$bell)
wgpa = distList$bell * runif(length(distList$bell))
mean(wgpa)
hist(wgpa)
hist(wgpa,gpa)
plot(wgpa,gpa)
hist(wgpa)
hist(gpa)
hist(distList$bell)
runif(length(distList$bell))
mean(runif(length(distList$bell)))
runif(10)
runif(10) + .5
noiseGenerator <- function(n = 100){
return(runif(n) + .5)
}
noiseGenerator()
mean(noiseGenerator())
mean(noiseGenerator())
mean(noiseGenerator())
mean(noiseGenerator())
mean(noiseGenerator())
mean(noiseGenerator())
mean(noiseGenerator())
mean(noiseGenerator())
source("src/generators.R")
gpa = function(pdist){
pdist * noiseGenerator(n = student.pop)
}
gpa
gpa = function(pdist){
# use bell curve + white noise centered at
return (
pdist * noiseGenerator(n = student.pop) * 2.7
)
}
gpa
gpa()
gpa(distList$bell)
mean(gpa(distList$bell))
noiseGenerator(student.pop)
mean(noiseGenerator(student.pop))
return (
pdist * noiseGenerator(n = student.pop) + 2.7
)
gpa = function(pdist){
# use bell curve + white noise centered at
return (
pdist * noiseGenerator(n = student.pop) + 2.7
)
}
gpa(distList$bell)
hist(gpa(distList$bell))
source('~/devel/whitby-prototype/src/generators.R')
source('~/devel/whitby-prototype/src/generators.R')
runif(student.pop, 0, 4)
mean(runif(student.pop, 0, 4))
source('~/devel/whitby-prototype/src/generators.R')
source('~/devel/whitby-prototype/src/generators.R')
gpa = rnorm(100, 2.8, .3)
hist(gpa)
min(gpa)
max(gpa)
gpa = rnorm(100, 2.8, .6)
max(gpa)
min(gpa)
high.set
distGen()
distGen()$high.set
dists = distGen()
dists$high.skew
hist(dists$high.skew)
dists$high.skew* 4
hist(dists$high.skew* 4)
max(dists$high.skew* 4)
dists = distGen(n = 8e3)
max(dists$high.skew* 4)
dists = distGen(n = 10e3)
max(dists$high.skew* 4)
max(dists$high.skew* 4.1)
min(dists$high.skew* 4.1)
dists$high.skew*4.1 > 4
dists$high.skew*4.1 > 4
dists$high.skew*4.1 > 4 == TRUE
(dists$high.skew*4.1 > 4) == TRUE
source('~/devel/whitby-prototype/src/generators.R')
student.pop = 10,000
tmp = dists$high.skew * 4.1
max(tmp)
tmp[tmp > 4] = 4
max(tmp)
min(tmp)
gpa = function(n){
# use right skew curve (0,1) + white noise centered at
tmp = dists$high.skew * 4.1 * noiseGenerator(student.pop)
tmp[tmp > 4] = 4
return(tmp)
}
max(gpa)
max(gpa(student.pop))
gpa = function(n){
# use right skew curve (0,1) + white noise centered at
tmp = dists$high.skew * 4.1 * noiseGenerator(n)
tmp[tmp > 4] = 4
return(tmp)
}
max(gpa(student.pop))
student.pop = 8e3
dists = distGen(n = student.pop)
gpa = function(n){
# use right skew curve (0,1) + white noise centered at
tmp = dists$high.skew * 4.1 * noiseGenerator(n)
tmp[tmp > 4] = 4
return(tmp)
}
max(gpa(student.pop))
gpa = function(n){
# use right skew curve (0,1) + white noise centered at
tmp = dists$high.skew * 4.1 * noiseGenerator(n)
tmp[tmp > 4] = 4
return(tmp)
}
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
gpa = function(n){
# use right skew curve (0,1) + white noise centered at
tmp = dists$high.skew * 4.2 * noiseGenerator(n)
tmp[tmp > 4] = 4
return(tmp)
}
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
max(gpa(student.pop))
min(gpa(student.pop))
min(gpa(student.pop))
min(gpa(student.pop))
min(gpa(student.pop))
min(gpa(student.pop))
min(gpa(student.pop))
min(gpa(student.pop))
rm(list=ls())
source('~/devel/whitby-prototype/pupil_static.R')
dists$high.tail
hist(dists$high.tail)
source('~/devel/whitby-prototype/src/generators.R')
distGen <- function(n = 100) {
# bell curve
bell.set = scale(rnorm(n,sd = 1))
# low-end tendency
low.set = rbeta(n, 3, 12)
# high-end tendency
high.set = rbeta(n,7,3)
# uniform
unif.set = runif(n)
# long high tail unimodal
gamma.set = rgamma(n,2)
# discrete decay
rg = rgeom(n,0.3)
return(
list(
bell = bell.set,
low.skew = low.set,
high.skew = high.set,
unif = unif.set,
high.tail = gamma.set,
decay = rg
)
)
}
noiseGenerator <- function(n = 100){
return(runif(n, 0, 1))
}
dists = distGen(n = student.pop) # generate distributions
hist(dists$bell)
bell.set = scale(rnorm(n, mean = 0, sd = 1))
distGen <- function(n = 100) {
# bell curve
bell.set = scale(rnorm(n, mean = 0, sd = 1))
# low-end tendency
low.set = rbeta(n, 3, 12)
# high-end tendency
high.set = rbeta(n,7,3)
# uniform
unif.set = runif(n)
# long high tail unimodal
gamma.set = rgamma(n,2)
# discrete decay
rg = rgeom(n,0.3)
return(
list(
bell = bell.set,
low.skew = low.set,
high.skew = high.set,
unif = unif.set,
high.tail = gamma.set,
decay = rg
)
)
}
source('~/devel/whitby-prototype/src/generators.R')
gpa = function(n = 4e2){
# use right skew curve (0,1) + white noise centered at
tmp = dists$high.skew * 4.2 * noiseGenerator(n)
# clip observations at 4.0
tmp[tmp > 4] = 4
return(tmp)
}
student.pop = 8e3 # set population size
dists = distGen(n = student.pop) # generate distributions
gpa = function(n = 4e2){
# use right skew curve (0,1) + white noise centered at
tmp = dists$high.skew * 4.2 * noiseGenerator(n)
# clip observations at 4.0
tmp[tmp > 4] = 4
return(tmp)
}
hist(dists$bell)
bell.set = scale(rnorm(n, mean = 0, sd = 1), center = TRUE, scale = TRUE)
distGen <- function(n = 100) {
# bell curve
bell.set = scale(rnorm(n, mean = 0, sd = 1), center = TRUE, scale = TRUE)
# low-end tendency
low.set = rbeta(n, 3, 12)
# high-end tendency
high.set = rbeta(n,7,3)
# uniform
unif.set = runif(n)
# long high tail unimodal
gamma.set = rgamma(n,2)
# discrete decay
rg = rgeom(n,0.3)
return(
list(
bell = bell.set,
low.skew = low.set,
high.skew = high.set,
unif = unif.set,
high.tail = gamma.set,
decay = rg
)
)
}
source('~/devel/whitby-prototype/src/generators.R')
source("src/generators.R")
student.pop = 8e3 # set population size
dists = distGen(n = student.pop) # generate distributions
hist(dists$bell)
source('~/devel/whitby-prototype/src/generators.R')
linMap <- function(x, from, to) {
# Shifting the vector so that min(x) == 0
x <- x - min(x)
# Scaling to the range of [0, 1]
x <- x / max(x)
# Scaling to the needed amplitude
x <- x * (to - from)
# Shifting to the needed level
x + from
}
bell.set = linmap(rnorm(n, mean = 0, sd = 1), 0, 1)
distGen <- function(n = 100) {
# bell curve
bell.set = linmap(rnorm(n, mean = 0, sd = 1), 0, 1)
# low-end tendency
low.set = rbeta(n, 3, 12)
# high-end tendency
high.set = rbeta(n,7,3)
# uniform
unif.set = runif(n)
# long high tail unimodal
gamma.set = rgamma(n,2)
# discrete decay
rg = rgeom(n,0.3)
return(
list(
bell = bell.set,
low.skew = low.set,
high.skew = high.set,
unif = unif.set,
high.tail = gamma.set,
decay = rg
)
)
}
source('~/devel/whitby-prototype/src/generators.R')
source("src/generators.R")
student.pop = 8e3 # set population size
dists = distGen(n = student.pop) # generate distributions
source('~/devel/whitby-prototype/src/generators.R')
source("src/generators.R")
student.pop = 8e3 # set population size
dists = distGen(n = student.pop) # generate distributions
dists$bell
hist(dists$bell)
source('~/devel/whitby-prototype/src/generators.R')
gpa = function(n = 4e2){
# use bell curve + white noise scaled to 4
tmp = linMap(dists$bell * noiseGenerator(n), 0 , 4)
return(tmp)
}
gpa(n = student.pop)
hist(gpa(n = student.pop))
noiseGenerator()
noiseGenerator <- function(n = 100){
return(runif(n, 0.9, 1.1))
}
source('~/devel/whitby-prototype/src/generators.R')
gpa = function(n = 4e2){
# use bell curve + white noise scaled to 4
tmp = linMap(dists$bell * noiseGenerator(n), 0 , 4)
return(tmp)
}
gpa()
hist(gpa())
source('~/devel/whitby-prototype/src/generators.R')
hist(dists$high.tail)
hist(linMap(dists$high.tail),0,22)
hist(linMap(dists$high.tail,0,22))
hist(linMap(dists$high.skew,0,22))
return(tmp)
emailCount = function(n = 4e2) {
# use decay (0,60)
tmp = linMap(dists$decay * noiseGenerator(n), 0, 60)
return(tmp)
}
hist(emailCount())
noiseGenerator <- function(n = 100, amp = .2){
# just a bit of random noise around 0.9-1.1
return(runif(n, 1-(amp/2), 1+(amp/2)))
}
emailCount = function(n = 4e2) { # model count of emails sent to professors
# use decay (0,60)
tmp = linMap(dists$decay * noiseGenerator(n), 0, 60)
return(tmp)
}
hist(emailCount())
source('~/devel/whitby-prototype/src/pupil_static.R')
pupil_table()
pupil_table()
source('~/devel/whitby-prototype/src/pupil_static.R')
pupil_table()
ptbl = pupil_table()
View(ptbl)
rm(list=ls())
